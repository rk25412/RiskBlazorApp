@page "/changeEmployeePassword/{PersonId}"
@layout MainLayout

@using System;
@using System.Linq;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Radzen;
@using Radzen.Blazor;
@using Clear.Risk.Models.ClearConnection;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.AspNetCore.Identity;
@using Clear.Risk.Models;
@using System.Security.Cryptography;
@using System.Text;
@using MimeKit;
@using MailKit.Net.Smtp;
@using System.Net.Http;
@using System.Runtime.CompilerServices;
@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card card-success">
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="loading">Loading&#8230;</div>
                        }
                        <RadzenTemplateForm Data="@person" Visible="@(person != null)" TItem="Person" Submit="@Form0Submit">
                            <ChildContent>
                                <div style="margin-bottom: 1rem" class="row">
                                    <div class="col-md-3">
                                        <RadzenLabel Text="New Password" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                    <div class="col-md-9">
                                        <RadzenTextBox Style="display:block;width:100%;" @bind-Value="@person.PASSWORDHASH">
                                        </RadzenTextBox>
                                    </div>
                                </div>
                                <div style="margin-bottom: 1rem" class="row">
                                    <div class="col-md-3">
                                        <RadzenLabel Text="Re-enter Password" style="width: 100%">
                                        </RadzenLabel>
                                    </div>
                                    <div class="col-md-9">
                                        <RadzenTextBox Style="display:block;width:100%;" @bind-Value="@person.ConfirmPassword">
                                        </RadzenTextBox>
                                    </div>
                                </div>
                                <div class="text-center">
                                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" ButtonStyle="ButtonStyle.Primary" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Click="@Button2Click" />
                                </div>
                            </ChildContent>
                        </RadzenTemplateForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@code {

    [Inject]
    protected ClearConnectionService ClearRisk { get; set; }
    [Inject]
    protected NavigationManager UriHelper { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    protected SecurityService Security { get; set; }

    [Parameter]
    public dynamic PersonId { get; set; }

    protected bool isLoading { get; set; }

    protected string HashPassword(string password)
    {
        using (var algorithm = SHA256.Create())
        {
            var hash = algorithm.ComputeHash(Encoding.ASCII.GetBytes(password));

            return Encoding.ASCII.GetString(hash);
        }
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (!Security.IsAuthenticated())
        {
            UriHelper.NavigateTo("Login", true);
        }
        else
        {
            isLoading = true;
            StateHasChanged();
            await Task.Delay(1);
            await Load();
            isLoading = false;
            StateHasChanged();
        }
    }

    protected Person person { get; set; }


    protected async System.Threading.Tasks.Task Load()
    {
        person = await ClearRisk.GetPersonByPersonId(Convert.ToInt32(PersonId));
        person.PASSWORDHASH = "";
        person.ConfirmPassword = "";
    }
    protected async System.Threading.Tasks.Task Form0Submit(Person args)
    {
        isLoading = true;
        StateHasChanged();
        await Task.Delay(1);

        if (string.IsNullOrEmpty(args.PASSWORDHASH) && string.IsNullOrEmpty(args.ConfirmPassword))
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error", $"Passwords fields cannot be empty", 180000);
            isLoading = false;
            return;
        }

        if (args.PASSWORDHASH != args.ConfirmPassword)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error", $"Passwords do not match", 180000);
            isLoading = false;
            return;
        }

        args.PASSWORDHASH = HashPassword(args.PASSWORDHASH);

        try
        {
            var result = await ClearRisk.UpdatePerson(args.PERSON_ID, args);

            if (result != null)
            {
                NotificationService.Notify(NotificationSeverity.Success, $"Success", $"Employee Password changed successfully.", 180000);
            }
            DialogService.Close(null);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error", $"Unable to change password!, " + ex.Message, 180000);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }

    }

    protected async Task Button2Click()
    {
        DialogService.Close(null);
    }
}
