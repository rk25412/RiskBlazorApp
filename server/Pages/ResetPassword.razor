@page "/ResetPassword"
@layout EmptyLayout


@using System.Text.RegularExpressions

<style>
    form .row {
        margin-bottom: 16px;
    }
</style>
<div class="row text-center mt-5">
    <div class="col-md-4"></div>
    <div class="col-md-4">
        @*<div class="form-group">
                <label>Enter email</label>
                <input type="email" @bind-value="Email" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <input type="text" @bind-value="password" />
            </div>
            <div class="form-group">
                <label>Re-enter password</label>
                <input type="text" @bind-value="confirmPassword" />
            </div>
            <button @onclick="OnSubmit">Submit</button>*@

        <RadzenFieldset Text="Reset Password">
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Enter email" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox style="display: block" Name="Email" @bind-Value=Email />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" Style="position: absolute" />
                    <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Style="position: absolute" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Password" />
                </div>
                <div class="col-md-6">
                    <RadzenPassword style="display: block" Placeholder="Enter Password..." @bind-value="password" Name="Password" />
                    @*<RadzenRequiredValidator Component="Password" Text="Enter password" Style="position: absolute" />
                    <RadzenRegexValidator Component="Password" Text="Password must Contain 8 characters including 1 uppercase letter, 1 special character, alphanumeric characters" Pattern="(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$" Style="position: absolute" />*@
                </div>
            </div>
            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Confirm Password" />
                </div>
                <div class="col-md-6">
                    <RadzenPassword style="display: block" Name="RepeatPassword" Placeholder="Re-Enter password..." @bind-value="confirmPassword" />
                    @*<RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your password" Style="position: absolute" />
                    <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(confirmPassword)) Value=password Component="RepeatPassword" Text="Passwords should be the same" Style="position: absolute" />*@
                </div>
            </div>
            <div class="row">
                <RadzenButton Click="OnSubmit" Text="Submit"></RadzenButton>
            </div>
        </RadzenFieldset>

    </div>
</div>





@code{

    [Inject]
    public NavigationManager UriHelper { get; set; }

    [Inject]
    public NotificationService notificationMessage { get; set; }

    //[Parameter]
    //public string code { get; set; }

    public string token { get; set; }

    public string password = "";

    public string confirmPassword = "";

    public string Email = "";


    protected override async Task OnInitializedAsync()
    {
        token = System.Web.HttpUtility.ParseQueryString(new Uri(UriHelper.ToAbsoluteUri(UriHelper.Uri).ToString()).Query).Get("code");
    }

    async Task OnSubmit()
    {
        if (Regex.IsMatch(Email, @"^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$"))
        {
            if (password.Length < 8)
            {
                notificationMessage.Notify(NotificationSeverity.Error, $"Error", $"Password must Contain atleast 8 characters.", 180000);
                return;
            }
            else
            {
                //if (Regex.IsMatch(password, "^[a-zA-Z0-9]*$"))
                if (Regex.IsMatch(password, "^(.{0,7}|[^0-9]*|[^A-Z]*|[a-zA-Z0-9]*)$"))
                {
                    notificationMessage.Notify(NotificationSeverity.Error, $"Error", $"Password must Contain 1 uppercase letter inculding 1 special character, alphanumeric characters.", 180000);
                    return;
                }
                else
                {

                    if (password != confirmPassword)
                    {
                        notificationMessage.Notify(NotificationSeverity.Error, $"Error", $"Repeated Password not mached .", 180000);
                        return;
                    }
                    else
                    {
                        UriHelper.NavigateTo($"/Account/ResetPassword?username={Email}&password={password}&code={token}", true);
                    }
                }
            }
        }
        else
        {
            notificationMessage.Notify(NotificationSeverity.Error, $"Error", $"Please enter vaild Email.", 180000);
            return;
        }

    }

}