@page "/person-site"
@layout MainLayout


@using Radzen
@using Radzen.Blazor
@using Clear.Risk.Models.ClearConnection
@using Microsoft.AspNetCore.Identity;
@using Clear.Risk.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]



<section class="content">
    <div class="container-fluid">
        <RadzenContent Container="main">
            <ChildContent>
                <div class="row">
                    <div class="col-md-12">
                        <div class="card card-success">
                            <div class="card-header">
                                <h4 class="card-title">Manage Company Work Sites</h4>
                                <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px; float:right" Text="Add" Click="@Button0Click">
                                </RadzenButton>
                            </div>
                            <div class="card-body">
                                <RadzenGrid @ref="grid0" AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@getPersonSitesResult" TItem="PersonSite" RowSelect="@Grid0RowSelect">
                                    <Columns>
                                        <RadzenGridColumn TItem="PersonSite" Property="SITE_ADDRESS1" Title="ADDRESS 1">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="SITE_ADDRESS2" Title="ADDRESS 2">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="CITY" Title="CITY">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="STATE_ID" SortProperty="State.STATENAME" FilterProperty="State.STATENAME" Title="State">
                                            <Template Context="data">
                                                @(data.State?.STATENAME)
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="POST_CODE" Title="POST CODE">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="COUNTRY_ID" SortProperty="Country.COUNTRYNAME" FilterProperty="Country.COUNTRYNAME" Title="Country">
                                            <Template Context="data">
                                                @(data.Country?.COUNTRYNAME)
                                            </Template>
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="LATITUDE" Title="LATITUDE">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="LONGITUDE" Title="LONGITUDE">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Property="IS_DELETED" Title="Active">
                                        </RadzenGridColumn>
                                        <RadzenGridColumn TItem="PersonSite" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                                            <Template Context="clearRiskModelsClearRiskPersonSite">
                                                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@((args) =>GridDeleteButtonClick(args, clearRiskModelsClearRiskPersonSite))" @onclick:stopPropagation="true">
                                                </RadzenButton>
                                            </Template>
                                        </RadzenGridColumn>
                                    </Columns>
                                </RadzenGrid>
                            </div>
                        </div>
                    </div>
                </div>
            </ChildContent>
        </RadzenContent>
    </div>
</section>




@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, dynamic> Attributes { get; set; }

    public void Reload()
    {
        InvokeAsync(StateHasChanged);
    }

    public void OnPropertyChanged(PropertyChangedEventArgs args)
    {
    }

    [Inject]
    protected NavigationManager UriHelper { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Inject]
    protected SecurityService Security { get; set; }

    [Inject]
    protected ClearConnectionService ClearRisk { get; set; }

    protected RadzenGrid<PersonSite> grid0;

    IEnumerable<PersonSite> _getPersonSitesResult;
    protected IEnumerable<PersonSite> getPersonSitesResult
    {
        get
        {
            return _getPersonSitesResult;
        }
        set
        {
            if (!object.Equals(_getPersonSitesResult, value))
            {
                var args = new PropertyChangedEventArgs() { Name = "getPersonSitesResult", NewValue = value, OldValue = _getPersonSitesResult };
                _getPersonSitesResult = value;
                OnPropertyChanged(args);
                Reload();
            }
        }
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (!Security.IsAuthenticated())
        {
            UriHelper.NavigateTo("Login", true);
        }
        else
        {
            await Load();
        }

    }
    protected async System.Threading.Tasks.Task Load()
    {
        var clearRiskGetPersonSitesResult = await ClearRisk.GetPersonSites();
        getPersonSitesResult = clearRiskGetPersonSitesResult;
    }

    protected async System.Threading.Tasks.Task Button0Click(MouseEventArgs args)
    {
        var dialogResult = await DialogService.OpenAsync<AddPersonSite>("Add Person Site", null, new DialogOptions() { Width = $"{800}px" });
        grid0.Reload();

        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async System.Threading.Tasks.Task Grid0RowSelect(PersonSite args)
    {
        var dialogResult = await DialogService.OpenAsync<EditPersonSite>("Edit Person Site", new Dictionary<string, object>() { { "PERSON_SITE_ID", args.PERSON_SITE_ID } });
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected async System.Threading.Tasks.Task GridDeleteButtonClick(MouseEventArgs args, dynamic data)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var clearRiskDeletePersonSiteResult = await ClearRisk.DeletePersonSite(data.PERSON_SITE_ID);
                if (clearRiskDeletePersonSiteResult != null)
                {
                    grid0.Reload();
                }
            }
        }
        catch (System.Exception clearRiskDeletePersonSiteException)
        {
            NotificationService.Notify(NotificationSeverity.Error, $"Error", $"Unable to delete PersonSite");
        }
    }
}
